import csv

class Node:
    def __init__(self, value, block_data=None):
        self.value = value
        self.left = None
        self.right = None
        self.data = block_data

def insert_bst(root, value, block_data):
    if root is None:
        return Node(value, block_data)
    if value < root.value:
        root.left = insert_bst(root.left, value, block_data)
    elif value > root.value:
        root.right = insert_bst(root.right, value, block_data)
    return root

def pre_order_traversal(node):
    if node:
        print(f"View: {node.value}, ID: {node.data['id'] if node.data else None}", end=" ")
        pre_order_traversal(node.left)
        pre_order_traversal(node.right)

def in_order_traversal(node):
    if node:
        in_order_traversal(node.left)
        print(f"View: {node.value}, ID: {node.data['id'] if node.data else None}", end=" ")
        in_order_traversal(node.right)

def post_order_traversal(node):
    if node:
        post_order_traversal(node.left)
        post_order_traversal(node.right)
        print(f"View: {node.value}, ID: {node.data['id'] if node.data else None}", end=" ")

def build_bst_from_csv(filename="votes.csv"):
    nodes = {}
    root_id = None

    with open(filename, 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            vote_id = int(row['vote_id'])
            left_id = row['left']
            right_id = row['right']

            nodes[vote_id] = Node(vote_id)


    with open(filename, 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            vote_id = int(row['vote_id'])
            left_id = row['left']
            right_id = row['right']

            current_node = nodes[vote_id]
            if left_id:
                current_node.left = nodes[int(left_id)]
            if right_id:
                current_node.right = nodes[int(right_id)]


            is_root = True
            for other_id, other_node in nodes.items():
                if other_node.left and other_node.left.value == vote_id:
                    is_root = False
                    break
                if other_node.right and other_node.right.value == vote_id:
                    is_root = False
                    break
            if is_root:
                root_id = vote_id

    return nodes.get(root_id)

root = build_bst_from_csv()

print("Pre-order обхід бінарного дерева (з файлу votes.csv):")
pre_order_traversal(root)
print("\nIn-order обхід бінарного дерева (з файлу votes.csv):")
in_order_traversal(root)
print("\nPost-order обхід бінарного дерева (з файлу votes.csv):")
post_order_traversal(root)

def count_nodes(node):
    if node is None:
        return 0
    return 1 + count_nodes(node.left) + count_nodes(node.right)

def get_depth(node):
    if node is None:
        return 0
    left_depth = get_depth(node.left)
    right_depth = get_depth(node.right)
    return max(left_depth, right_depth) + 1

def is_complete(root, index, num_nodes):
    if root is None:
        return True
    if index >= num_nodes:
        return False
    return is_complete(root.left, 2 * index + 1, num_nodes) and \
           is_complete(root.right, 2 * index + 2, num_nodes)

def is_full_binary_tree(root):
    if root is None:
        return True
    if (root.left is None and root.right is not None) or \
       (root.left is not None and root.right is None):
        return False
    return is_full_binary_tree(root.left) and is_full_binary_tree(root.right)

def is_perfect(root):
    depth = get_depth(root)
    return (2**depth - 1) == count_nodes(root) and is_full_binary_tree(root)

if root:
    num_nodes = count_nodes(root)
    is_comp = is_complete(root, 0, num_nodes)
    is_full = is_full_binary_tree(root)
    is_perf = is_perfect(root)

    print(f"\nЧи є дерево повним? {is_comp}")
    print(f"Чи є дерево повним бінарним? {is_full}")
    print(f"Чи є дерево ідеальним? {is_perf}")
else:
    print("\nФайл votes.csv порожній або не містить коректних даних дерева.")
